diff --git a/src/eval.c b/src/eval.c
index 24f00ae..e933885 100644
--- a/src/eval.c
+++ b/src/eval.c
@@ -297,17 +297,10 @@ CELL internal_execute() {
                 if (SLOTP(value)) {
                     DELIVER(env_get(env, GET_SLOT(value)));
                 } else if (SYMBOLP(value)) {
-                    const CELL ignore = value;
                     if (DEFINED_BINDING(value)) {
                         DELIVER(GET_BINDING(value));
                     } else {
-                        SYMBOL *p = GET_SYMBOL(value);
-                        if (!NULLP(p->gensym) && NULLP(p->name_str)) {
-                            THROW(make_exception("undefined name: #_%"PRId64, GET_INT(p->gensym)));
-                        } else {
-                            STRING *pname = GET_STRING(p->name_str);
-                            THROW(make_exception("undefined name: %s", pname->data));
-                        }
+                        THROW(make_exception2("undefined name", value));
                     }
                 } else if (COMPILED_LAMBDAP(value)) {
                     DELIVER(make_closure(value, env));
@@ -538,10 +526,10 @@ CELL internal_execute() {
                     INT max_args = GET_INT(GET_FUNC(value)->max_args);
                     if (argc < min_args) {
                         args = V_EMPTY;
-                        THROW(make_exception("%s: too few arguments", GET_STRING(GET_FUNC(value)->name_str)->data));
+                        THROW(make_exception2("too few arguments", GET_FUNC(value)->name_str));
                     } else if (max_args >= 0 && argc > max_args) {
                         args = V_EMPTY;
-                        THROW(make_exception("%s: too many arguments", GET_STRING(GET_FUNC(value)->name_str)->data));
+                        THROW(make_exception2("too many arguments", GET_FUNC(value)->name_str));
                     } else {
                         // this consumes heap on every function invocation
                         frame = make_env(argc, env);
@@ -574,7 +562,7 @@ CELL internal_execute() {
                     }
                 } else {
                     args = V_EMPTY;
-                    THROW(make_exception("operator is not a function"));
+                    THROW(make_exception2("operator is not a function", value));
                 }
                 break;
             }
@@ -1035,11 +1018,7 @@ CELL internal_execute() {
 
                 SYMBOL *p = GET_SYMBOL(variable);
                 if (UNDEFINEDP(p->binding)) {
-                    if (!NULLP(p->gensym) && NULLP(p->name_str)) {
-                        THROW(make_exception("cannot set undefined identifier #_%"PRId64, p->gensym));
-                    } else {
-                        THROW(make_exception("cannot set undefined identifier %s", GET_STRING(p->name_str)->data));
-                    }
+                    THROW(make_exception2("cannot set undefined identifier", variable));
                 } else {
                     GET_SYMBOL(variable)->binding = value;
                     DELIVER(V_VOID);
@@ -1374,7 +1347,7 @@ CELL func_null_environment(CELL frame) {
     ASSERT_INTP(0);
     const INT version = GET_INT(FV0);
     if (version != 5) {
-        return make_exception("unsupported version");
+        return make_exception2("unsupported version", FV0);
     }
     // TODO - as environments are not currently supported just return '() as a placeholder.
     return V_NULL;
@@ -1391,7 +1364,7 @@ CELL func_scheme_report_environment(CELL frame) {
     ASSERT_INTP(0);
     const INT version = GET_INT(FV0);
     if (version != 5) {
-        return make_exception("unsupported version");
+        return make_exception2("unsupported version", FV0);
     }
     // TODO - as environments are not currently supported just return '() as a placeholder.
     return V_NULL;
diff --git a/src/gc.c b/src/gc.c
index e402eae..6f547e7 100644
--- a/src/gc.c
+++ b/src/gc.c
@@ -302,6 +302,7 @@ void gc_check_headroom() {
 
-    // FIXME better to zero everything in one go at collection time?
-    //memset(gc_next, 0, bytes);
     gc_next = bumped_next;
     if (IS_POINTER_TAG(type)) {
         result.as_bits |= type;
@@ -349,6 +351,20 @@ CELL gc_alloc_raw(
     return result;
 }
 
diff --git a/src/heap.c b/src/heap.c
index ec12aa2..1d0f805 100644
--- a/src/heap.c
+++ b/src/heap.c
@@ -94,7 +88,6 @@ CELL make_exception(const char *fmt, ...) {
     va_end(ap);
 
     CELL message = make_immutable_string(buf);
-    gc_root_1("make_exception", message);
 
     CELL exception = gc_alloc(EXCEPTION);
     EXCEPTION *p = GET_EXCEPTION(exception);
@@ -102,11 +95,17 @@ CELL make_exception(const char *fmt, ...) {
     p->message_str = message;
     p->extra = V_NULL;
 
-    gc_unroot();
     return exception;
 }
 
+CELL make_exception2(const char *msg, CELL extra) {
+    CELL exn = make_exception("%s", msg);
+    GET_EXCEPTION(exn)->extra = extra;
+    return exn;
+}

diff --git a/src/str.c b/src/str.c
index e8d0d86..2051edc 100644
--- a/src/str.c
+++ b/src/str.c
     gc_root_1("func_substring", string);
     const CELL result = make_raw_string(end - start);
     gc_unroot();
@@ -199,7 +198,7 @@ DECLARE_FUNC(
     func_string_append, 0, -1,
     "string-append", "string ...",
     "Returns the concatenation of all the arguments."
-    " Returns the empty string of no arguments are supplied."
+    " Returns the empty string if no arguments are supplied."
 )
 
diff --git a/src/system.c b/src/system.c
index 45f0c10..dc3d5fe 100644
--- a/src/system.c
+++ b/src/system.c
@@ -6,10 +6,11 @@
 DECLARE_FUNC(
     func_system, 1, 1,
     "system", "string",
-    "Invokes the commander interpreter 'sh' with the command <string>."
+    "Invokes the command interpreter 'sh' with the command <string>."
     " Returns the exit status as an integer."
 )
 
+// TODO - we should invoke exec instead to avoid hideous shell injection and quoting problems.
 CELL func_system(CELL frame) {
     ASSERT_STRINGP(0);
     const STRING *p = GET_STRING(FV0);
diff --git a/src/vector.c b/src/vector.c
index 917b519..2170098 100644
--- a/src/vector.c
+++ b/src/vector.c
@@ -21,7 +21,7 @@ DECLARE_FUNC(
     func_make_vector, 1, 2,
     "make-vector", "len:integer obj",
     "Returns a new vector of <len> elements, each initialised to <obj>,"
-    " or to the integer 0 if <obj> is not supplied."
+    " otherwise the initial contents of each element is unspecified."
 )
 
 CELL func_make_vector(CELL frame) {
@@ -30,7 +30,7 @@ CELL func_make_vector(CELL frame) {
     if (!(len >= 0)) {
         return make_exception("expects non-negative length at argument 1");
     }
-    const CELL obj = (FC == 1) ? make_int(0) : FV1;
+    const CELL obj = (FC == 1) ? V_NULL : FV1;
     return make_vector_inited(len, obj);
 }
 
diff --git a/src/wisp.h b/src/wisp.h
index 8774e78..cc034ae 100644
--- a/src/wisp.h
+++ b/src/wisp.h
@@ -685,6 +685,8 @@ extern CELL make_func(const char *name, const char *help_args, const char *help_
 
 extern CELL make_exception(const char *fmt, ...);
 
+extern CELL make_exception2(const char *msg, CELL extra);
+
 // ---------------------------------------------------------------------
 // Object constructors (indirect tagged)
 // make_reloc?
