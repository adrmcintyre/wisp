loaded lib/core/special.wisp
loaded lib/core/map.wisp
loaded lib/core/control.wisp
loaded lib/core/arith.wisp
loaded lib/core/vector.wisp
loaded lib/core/io.wisp
loaded lib/core/promise.wisp
<<wisp>> SECTION(2 1)
#t
(+ - ... !.. $.+ %.- &.! *.: /:. :+. <-. =. >. ?. ~. _. ^.)
SECTION(3 4)
#t
 #<primitive:boolean?>
    #<primitive:char?>
       #<primitive:null?>
          #<primitive:number?>
             #<primitive:pair?>
                #<primitive:procedure?>
                   #<primitive:string?>
                      #<primitive:symbol?>
                         #<primitive:vector?>
(#t #f #f #f #f #f #f #f #f)#t
(#t #f #f #f #f #f #f #f #f)#f
(#f #t #f #f #f #f #f #f #f)#\a
(#f #f #t #f #f #f #f #f #f)()
(#f #f #f #t #f #f #f #f #f)9739
(#f #f #f #f #t #f #f #f #f)(test)
(#f #f #f #f #f #t #f #f #f)#<closure:0x00270bec>
(#f #f #f #f #f #f #t #f #f)"test"
(#f #f #f #f #f #f #t #f #f)""
(#f #f #f #f #f #f #f #t #f)test
(#f #f #f #f #f #f #f #f #t)#()
(#f #f #f #f #f #f #f #f #t)#(a b c)
SECTION(4 1 2)
#t
(quote (quote a))  ==> (quote a)
#t
(quote (quote a))  ==> (quote a)
#t
SECTION(4 1 3)
#t
(#<primitive:*> 3 4)  ==> 12
#t
SECTION(4 1 4)
#t
(#<closure:0x002b7158> 4)  ==> 8
#t
(#<closure:0x002b7fdc> 7 10)  ==> 3
#t
(#<closure:0x002ba10c> 6)  ==> 10
#t
(#<closure:0x002bae28> 3 4 5 6)  ==> (3 4 5 6)
#t
(#<closure:0x002bba6c> 3 4 5 6)  ==> (5 6)
#t
SECTION(4 1 5)
#t
(if yes)  ==> yes
#t
(if no)  ==> no
#t
(if 1)  ==> 1
#t
SECTION(4 1 6)
#t
(define 3)  ==> 3
#t
(set! 5)  ==> 5
#t
SECTION(4 2 1)
#t
(cond greater)  ==> greater
#t
(cond equal)  ==> equal
#t
(cond 2)  ==> 2
#t
(case composite)  ==> composite
#t
(case consonant)  ==> consonant
#t
(and #t)  ==> #t
#t
(and #f)  ==> #f
#t
(and (f g))  ==> (f g)
#t
(and #t)  ==> #t
#t
(or #t)  ==> #t
#t
(or #t)  ==> #t
#t
(or #f)  ==> #f
#t
(or #f)  ==> #f
#t
(or (b c))  ==> (b c)
#t
SECTION(4 2 2)
#t
(let 6)  ==> 6
#t
(let 35)  ==> 35
#t
(let* 70)  ==> 70
#t
(letrec #t)  ==> #t
#t
(let 5)  ==> 5
#t
(let 34)  ==> 34
#t
(let 6)  ==> 6
#t
(let 34)  ==> 34
#t
(let* 7)  ==> 7
#t
(let* 34)  ==> 34
#t
(let* 8)  ==> 8
#t
(let* 34)  ==> 34
#t
(letrec 9)  ==> 9
#t
(letrec 34)  ==> 34
#t
(letrec 10)  ==> 10
#t
(letrec 34)  ==> 34
#t
SECTION(4 2 3)
#t
(begin 6)  ==> 6
#t
SECTION(4 2 4)
#t
(do #(0 1 2 3 4))  ==> #(0 1 2 3 4)
#t
(do 25)  ==> 25
#t
(let 1)  ==> 1
#t
(let ((6 1 3) (-5 -2)))  ==> ((6 1 3) (-5 -2))
#t
SECTION(4 2 6)
#t
(quasiquote (list 3 4))  ==> (list 3 4)
#t
(quasiquote (list a (quote a)))  ==> (list a (quote a))
#t
(quasiquote (a 3 4 5 6 b))  ==> (a 3 4 5 6 b)
#t
(quasiquote ((foo 7) . cons))  ==> ((foo 7) . cons)
#t
(quasiquote #(10 5 (unquote (sqt 4)) (unquote-splicing (map sqt (quote (16 9)))) 8))  ==> #(10 5 (unquote (sqt 4)) (unquote-splicing (map sqt (quote (16 9)))) 8)
 BUT EXPECTED #(10 5 2 4 3 8)
#f
(quasiquote 5)  ==> 5
#t
(quasiquote (a (quasiquote (b (unquote (+ 1 2)) (unquote (foo 4 d)) e)) f))  ==> (a (quasiquote (b (unquote (+ 1 2)) (unquote (foo 4 d)) e)) f)
#t
(quasiquote (a (quasiquote (b (unquote x) (unquote (quote y)) d)) e))  ==> (a (quasiquote (b (unquote x) (unquote (quote y)) d)) e)
#t
(quasiquote (list 3 4))  ==> (list 3 4)
#t
(quasiquote (quasiquote (list (unquote (+ 1 2)) 4)))  ==> (quasiquote (list (unquote (+ 1 2)) 4))
#t
SECTION(5 2 1)
#t
(define 6)  ==> 6
#t
(define 1)  ==> 1
#t
(#<closure:0x00343e88> 6)  ==> (3 6)
#t
(#<closure:0x00343e88> 6)  ==> 9
#t
SECTION(5 2 2)
#t
(define 45)  ==> 45
#t
(#<closure:0x00353bf4>)  ==> 5
#t
(define 34)  ==> 34
#t
(#<closure:0x003593a0>)  ==> 5
#t
(define 34)  ==> 34
#t
(#<closure:0x0035f51c> 88)  ==> 88
#t
(#<closure:0x0035f51c> 4)  ==> 4
#t
(define 34)  ==> 34
#t
SECTION(6 1)
#t
(#<primitive:not> #t)  ==> #f
#t
(#<primitive:not> 3)  ==> #f
#t
(#<primitive:not> (3))  ==> #f
#t
(#<primitive:not> #f)  ==> #t
#t
(#<primitive:not> ())  ==> #f
#t
(#<primitive:not> ())  ==> #f
#t
(#<primitive:not> nil)  ==> #f
#t
(#<primitive:boolean?> #f)  ==> #t
#t
(#<primitive:boolean?> 0)  ==> #f
#t
(#<primitive:boolean?> ())  ==> #f
#t
SECTION(6 2)
#t
(#<primitive:eqv?> a a)  ==> #t
#t
(#<primitive:eqv?> a b)  ==> #f
#t
(#<primitive:eqv?> 2 2)  ==> #t
#t
(#<primitive:eqv?> () ())  ==> #t
#t
(#<primitive:eqv?> 10000 10000)  ==> #t
#t
(#<primitive:eqv?> (1 . 2) (1 . 2))  ==> #f
#t
(#<primitive:eqv?> #<closure:0x00367340> #<closure:0x0036736c>)  ==> #f
#t
(#<primitive:eqv?> #f nil)  ==> #f
#t
(#<primitive:eqv?> #<closure:0x00369584> #<closure:0x00369584>)  ==> #t
#t
(#<primitive:eqv?> #<closure:0x0036cf04> #<closure:0x0036cf04>)  ==> #t
#t
(#<primitive:eqv?> #<closure:0x0036d608> #<closure:0x0036d6b0>)  ==> #f
#t
(#<primitive:eqv?> #<closure:0x0037378c> #<closure:0x003737b4>)  ==> #f
#t
(#<primitive:eq?> a a)  ==> #t
#t
(#<primitive:eq?> (a) (a))  ==> #f
#t
(#<primitive:eq?> () ())  ==> #t
#t
(#<primitive:eq?> #<primitive:car> #<primitive:car>)  ==> #t
#t
(#<primitive:eq?> (a) (a))  ==> #t
#t
(#<primitive:eq?> #() #())  ==> #t
#t
(#<primitive:eq?> #<closure:0x00379c5c> #<closure:0x00379c5c>)  ==> #t
#t
(#<primitive:equal?> a a)  ==> #t
#t
(#<primitive:equal?> (a) (a))  ==> #t
#t
(#<primitive:equal?> (a (b) c) (a (b) c))  ==> #t
#t
(#<primitive:equal?> "abc" "abc")  ==> #t
#t
(#<primitive:equal?> 2 2)  ==> #t
#t
(#<primitive:equal?> #(a a a a a) #(a a a a a))  ==> #t
#t
SECTION(6 3)
#t
(dot (a b c d e))  ==> (a b c d e)
#t
(#<primitive:list?> (a b c))  ==> #t
#t
(set-cdr! (a . 4))  ==> (a . 4)
#t
(#<primitive:eqv?> (a . 4) (a . 4))  ==> #t
#t
(dot (a b c . d))  ==> (a b c . d)
#t
(#<primitive:list?> (a . 4))  ==> #f
#t
(#<primitive:pair?> (a . b))  ==> #t
#t
(#<primitive:pair?> (a . 1))  ==> #t
#t
(#<primitive:pair?> (a b c))  ==> #t
#t
(#<primitive:pair?> ())  ==> #f
#t
(#<primitive:pair?> #(a b))  ==> #f
#t
(#<primitive:cons> a ())  ==> (a)
#t
(#<primitive:cons> (a) (b c d))  ==> ((a) b c d)
#t
(#<primitive:cons> "a" (b c))  ==> ("a" b c)
#t
(#<primitive:cons> a 3)  ==> (a . 3)
#t
(#<primitive:cons> (a b) c)  ==> ((a b) . c)
#t
(#<primitive:car> (a b c))  ==> a
#t
(#<primitive:car> ((a) b c d))  ==> (a)
#t
(#<primitive:car> (1 . 2))  ==> 1
#t
(#<primitive:cdr> ((a) b c d))  ==> (b c d)
#t
(#<primitive:cdr> (1 . 2))  ==> 2
#t
(#<primitive:list> a 7 c)  ==> (a 7 c)
#t
(#<primitive:list>)  ==> ()
#t
(#<primitive:length> (a b c))  ==> 3
#t
(#<primitive:length> (a (b) (c d e)))  ==> 3
#t
(#<primitive:length> ())  ==> 0
#t
(#<primitive:append> (x) (y))  ==> (x y)
#t
(#<primitive:append> (a) (b c d))  ==> (a b c d)
#t
(#<primitive:append> (a (b)) ((c)))  ==> (a (b) (c))
#t
(#<primitive:append>)  ==> ()
#t
(#<primitive:append> (a b) (c . d))  ==> (a b c . d)
#t
(#<primitive:append> () a)  ==> a
#t
(#<primitive:append> (x y z))  ==> (x y z)
#t
(#<primitive:eq?> (a . 4) (a . 4))  ==> #t
#t
(#<primitive:reverse> (a b c))  ==> (c b a)
#t
(#<primitive:reverse> (a (b c) d (e (f))))  ==> ((e (f)) d (b c) a)
#t
(#<primitive:list-ref> (a b c d) 2)  ==> c
#t
(#<primitive:memq> a (a b c))  ==> (a b c)
#t
(#<primitive:memq> b (a b c))  ==> (b c)
#t
(#<primitive:memq> a (b c d))  ==> #f
#t
(#<primitive:memq> (a) (b (a) c))  ==> #f
#t
(#<primitive:member> (a) (b (a) c))  ==> ((a) c)
#t
(#<primitive:memv> 101 (100 101 102))  ==> (101 102)
#t
(#<primitive:assq> a ((a 1) (b 2) (c 3)))  ==> (a 1)
#t
(#<primitive:assq> b ((a 1) (b 2) (c 3)))  ==> (b 2)
#t
(#<primitive:assq> d ((a 1) (b 2) (c 3)))  ==> #f
#t
(#<primitive:assq> (a) (((a)) ((b)) ((c))))  ==> #f
#t
(#<primitive:assoc> (a) (((a)) ((b)) ((c))))  ==> ((a))
#t
(#<primitive:assv> 5 ((2 3) (5 7) (11 13)))  ==> (5 7)
#t
SECTION(6 4)
#t
(#<primitive:symbol?> foo)  ==> #t
#t
(#<primitive:symbol?> a)  ==> #t
#t
(#<primitive:symbol?> "bar")  ==> #f
#t
(#<primitive:symbol?> nil)  ==> #t
#t
(#<primitive:symbol?> ())  ==> #f
#t
(#<primitive:symbol?> #f)  ==> #f
#t
(standard-case #t)  ==> #t
#t
(standard-case #t)  ==> #t
#t
(#<primitive:symbol->string> flying-fish)  ==> "flying-fish"
#t
(#<primitive:symbol->string> martin)  ==> "martin"
#t
(#<primitive:symbol->string> Malvina)  ==> "Malvina"
#t
(standard-case #t)  ==> #t
#t
(string-set! "cb")  ==> "cb"
#t
(#<primitive:symbol->string> ab)  ==> "ab"
#t
(#<primitive:string->symbol> "ab")  ==> ab
#t
(#<primitive:eq?> mississippi mississippi)  ==> #t
#t
(string->symbol #f)  ==> #f
#t
(#<primitive:string->symbol> "jollywog")  ==> jollywog
#t
SECTION(6 5 5)
#t
(#<primitive:number?> 3)  ==> #t
#t
(#<primitive:complex?> 3)  ==> #t
#t
(#<primitive:real?> 3)  ==> #t
#t
(#<primitive:rational?> 3)  ==> #t
#t
(#<primitive:integer?> 3)  ==> #t
#t
(#<primitive:exact?> 3)  ==> #t
#t
(#<primitive:inexact?> 3)  ==> #f
#t
(#<primitive:=> 22 22 22)  ==> #t
#t
(#<primitive:=> 22 22)  ==> #t
#t
(#<primitive:=> 34 34 35)  ==> #f
#t
(#<primitive:=> 34 35)  ==> #f
#t
(#<primitive:>> 3 -6246)  ==> #t
#t
(#<primitive:>> 9 9 -2424)  ==> #f
#t
(#<primitive:>=> 3 -4 -6246)  ==> #t
#t
(#<primitive:>=> 9 9)  ==> #t
#t
(#<primitive:>=> 8 9)  ==> #f
#t
(#<primitive:<> -1 2 3 4 5 6 7 8)  ==> #t
#t
(#<primitive:<> -1 2 3 4 4 5 6 7)  ==> #f
#t
(#<primitive:<=> -1 2 3 4 5 6 7 8)  ==> #t
#t
(#<primitive:<=> -1 2 3 4 4 5 6 7)  ==> #t
#t
(#<primitive:<> 1 3 2)  ==> #f
#t
(#<primitive:>=> 1 3 2)  ==> #f
#t
(#<primitive:zero?> 0)  ==> #t
#t
(#<primitive:zero?> 1)  ==> #f
#t
(#<primitive:zero?> -1)  ==> #f
#t
(#<primitive:zero?> -100)  ==> #f
#t
(#<primitive:positive?> 4)  ==> #t
#t
(#<primitive:positive?> -4)  ==> #f
#t
(#<primitive:positive?> 0)  ==> #f
#t
(#<primitive:negative?> 4)  ==> #f
#t
(#<primitive:negative?> -4)  ==> #t
#t
(#<primitive:negative?> 0)  ==> #f
#t
(#<primitive:odd?> 3)  ==> #t
#t
(#<primitive:odd?> 2)  ==> #f
#t
(#<primitive:odd?> -4)  ==> #f
#t
(#<primitive:odd?> -1)  ==> #t
#t
(#<primitive:even?> 3)  ==> #f
#t
(#<primitive:even?> 2)  ==> #t
#t
(#<primitive:even?> -4)  ==> #t
#t
(#<primitive:even?> -1)  ==> #f
#t
(#<primitive:max> 34 5 7 38 6)  ==> 38
#t
(#<primitive:min> 3 5 5 330 4 -24)  ==> -24
#t
(#<primitive:+> 3 4)  ==> 7
#t
(#<primitive:+> 3)  ==> 3
#t
(#<primitive:+>)  ==> 0
#t
(#<primitive:*> 4)  ==> 4
#t
(#<primitive:*>)  ==> 1
#t
(#<primitive:-> 3 4)  ==> -1
#t
(#<primitive:-> 3)  ==> -3
#t
(#<primitive:abs> -7)  ==> 7
#t
(#<primitive:abs> 7)  ==> 7
#t
(#<primitive:abs> 0)  ==> 0
#t
(#<primitive:quotient> 35 7)  ==> 5
#t
(#<primitive:quotient> -35 7)  ==> -5
#t
(#<primitive:quotient> 35 -7)  ==> -5
#t
(#<primitive:quotient> -35 -7)  ==> 5
#t
(#<primitive:modulo> 13 4)  ==> 1
#t
(#<primitive:remainder> 13 4)  ==> 1
#t
(#<primitive:modulo> -13 4)  ==> 3
#t
(#<primitive:remainder> -13 4)  ==> -1
#t
(#<primitive:modulo> 13 -4)  ==> -3
#t
(#<primitive:remainder> 13 -4)  ==> 1
#t
(#<primitive:modulo> -13 -4)  ==> -1
#t
(#<primitive:remainder> -13 -4)  ==> -1
#t
(#<closure:0x003c69ac> 238 9)  ==> #t
#t
(#<closure:0x003c69ac> -238 9)  ==> #t
#t
(#<closure:0x003c69ac> 238 -9)  ==> #t
#t
(#<closure:0x003c69ac> -238 -9)  ==> #t
#t
(#<closure:0x0023e01c> 0 4)  ==> 4
#t
(#<closure:0x0023e01c> -4 0)  ==> 4
#t
(#<closure:0x0023e01c> 32 -36)  ==> 4
#t
(#<closure:0x0023e01c>)  ==> 0
#t
(#<closure:0x0024d48c> 32 -36)  ==> 288
#t
(#<closure:0x0024d48c>)  ==> 1
#t
SECTION(6 5 6)
#t
(#<primitive:number->string> 0)  ==> "0"
#t
(#<primitive:number->string> 100)  ==> "100"
#t
(#<primitive:number->string> 256 16)  ==> "100"
#t
(#<primitive:string->number> "100")  ==> 100
#t
(#<primitive:string->number> "100" 16)  ==> 256
#t
(#<primitive:string->number> "")  ==> #f
#t
(#<primitive:string->number> ".")  ==> 0.000000
 BUT EXPECTED #f
#f
(#<primitive:string->number> "d")  ==> 0.000000
 BUT EXPECTED #f
#f
(#<primitive:string->number> "D")  ==> 0.000000
 BUT EXPECTED #f
#f
(#<primitive:string->number> "i")  ==> #f
#t
(#<primitive:string->number> "I")  ==> #f
#t
(#<primitive:string->number> "3i")  ==> #f
#t
(#<primitive:string->number> "3I")  ==> #f
#t
(#<primitive:string->number> "33i")  ==> #f
#t
(#<primitive:string->number> "33I")  ==> #f
#t
(#<primitive:string->number> "3.3i")  ==> #f
#t
(#<primitive:string->number> "3.3I")  ==> #f
#t
(#<primitive:string->number> "-")  ==> 0
 BUT EXPECTED #f
#f
(#<primitive:string->number> "+")  ==> 0
 BUT EXPECTED #f
#f
SECTION(6 6)
#t
(#<primitive:eqv?> #\space #\space)  ==> #t
#t
(#<primitive:eqv?> #\space #\space)  ==> #t
#t
(#<primitive:char?> #\a)  ==> #t
#t
(#<primitive:char?> #\()  ==> #t
#t
(#<primitive:char?> #\space)  ==> #t
#t
(#<primitive:char?> #\newline)  ==> #t
#t
(#<primitive:char=?> #\A #\B)  ==> #f
#t
(#<primitive:char=?> #\a #\b)  ==> #f
#t
(#<primitive:char=?> #\9 #\0)  ==> #f
#t
(#<primitive:char=?> #\A #\A)  ==> #t
#t
(#<primitive:char<?> #\A #\B)  ==> #t
#t
(#<primitive:char<?> #\a #\b)  ==> #t
#t
(#<primitive:char<?> #\9 #\0)  ==> #f
#t
(#<primitive:char<?> #\A #\A)  ==> #f
#t
(#<primitive:char>?> #\A #\B)  ==> #f
#t
(#<primitive:char>?> #\a #\b)  ==> #f
#t
(#<primitive:char>?> #\9 #\0)  ==> #t
#t
(#<primitive:char>?> #\A #\A)  ==> #f
#t
(#<primitive:char<=?> #\A #\B)  ==> #t
#t
(#<primitive:char<=?> #\a #\b)  ==> #t
#t
(#<primitive:char<=?> #\9 #\0)  ==> #f
#t
(#<primitive:char<=?> #\A #\A)  ==> #t
#t
(#<primitive:char>=?> #\A #\B)  ==> #f
#t
(#<primitive:char>=?> #\a #\b)  ==> #f
#t
(#<primitive:char>=?> #\9 #\0)  ==> #t
#t
(#<primitive:char>=?> #\A #\A)  ==> #t
#t
(#<primitive:char-ci=?> #\A #\B)  ==> #f
#t
(#<primitive:char-ci=?> #\a #\B)  ==> #f
#t
(#<primitive:char-ci=?> #\A #\b)  ==> #f
#t
(#<primitive:char-ci=?> #\a #\b)  ==> #f
#t
(#<primitive:char-ci=?> #\9 #\0)  ==> #f
#t
(#<primitive:char-ci=?> #\A #\A)  ==> #t
#t
(#<primitive:char-ci=?> #\A #\a)  ==> #t
#t
(#<primitive:char-ci<?> #\A #\B)  ==> #t
#t
(#<primitive:char-ci<?> #\a #\B)  ==> #t
#t
(#<primitive:char-ci<?> #\A #\b)  ==> #t
#t
(#<primitive:char-ci<?> #\a #\b)  ==> #t
#t
(#<primitive:char-ci<?> #\9 #\0)  ==> #f
#t
(#<primitive:char-ci<?> #\A #\A)  ==> #f
#t
(#<primitive:char-ci<?> #\A #\a)  ==> #f
#t
(#<primitive:char-ci>?> #\A #\B)  ==> #f
#t
(#<primitive:char-ci>?> #\a #\B)  ==> #f
#t
(#<primitive:char-ci>?> #\A #\b)  ==> #f
#t
(#<primitive:char-ci>?> #\a #\b)  ==> #f
#t
(#<primitive:char-ci>?> #\9 #\0)  ==> #t
#t
(#<primitive:char-ci>?> #\A #\A)  ==> #f
#t
(#<primitive:char-ci>?> #\A #\a)  ==> #f
#t
(#<primitive:char-ci<=?> #\A #\B)  ==> #t
#t
(#<primitive:char-ci<=?> #\a #\B)  ==> #t
#t
(#<primitive:char-ci<=?> #\A #\b)  ==> #t
#t
(#<primitive:char-ci<=?> #\a #\b)  ==> #t
#t
(#<primitive:char-ci<=?> #\9 #\0)  ==> #f
#t
(#<primitive:char-ci<=?> #\A #\A)  ==> #t
#t
(#<primitive:char-ci<=?> #\A #\a)  ==> #t
#t
(#<primitive:char-ci>=?> #\A #\B)  ==> #f
#t
(#<primitive:char-ci>=?> #\a #\B)  ==> #f
#t
(#<primitive:char-ci>=?> #\A #\b)  ==> #f
#t
(#<primitive:char-ci>=?> #\a #\b)  ==> #f
#t
(#<primitive:char-ci>=?> #\9 #\0)  ==> #t
#t
(#<primitive:char-ci>=?> #\A #\A)  ==> #t
#t
(#<primitive:char-ci>=?> #\A #\a)  ==> #t
#t
(#<primitive:char-alphabetic?> #\a)  ==> #t
#t
(#<primitive:char-alphabetic?> #\A)  ==> #t
#t
(#<primitive:char-alphabetic?> #\z)  ==> #t
#t
(#<primitive:char-alphabetic?> #\Z)  ==> #t
#t
(#<primitive:char-alphabetic?> #\0)  ==> #f
#t
(#<primitive:char-alphabetic?> #\9)  ==> #f
#t
(#<primitive:char-alphabetic?> #\space)  ==> #f
#t
(#<primitive:char-alphabetic?> #\;)  ==> #f
#t
(#<primitive:char-numeric?> #\a)  ==> #f
#t
(#<primitive:char-numeric?> #\A)  ==> #f
#t
(#<primitive:char-numeric?> #\z)  ==> #f
#t
(#<primitive:char-numeric?> #\Z)  ==> #f
#t
(#<primitive:char-numeric?> #\0)  ==> #t
#t
(#<primitive:char-numeric?> #\9)  ==> #t
#t
(#<primitive:char-numeric?> #\space)  ==> #f
#t
(#<primitive:char-numeric?> #\;)  ==> #f
#t
(#<primitive:char-whitespace?> #\a)  ==> #f
#t
(#<primitive:char-whitespace?> #\A)  ==> #f
#t
(#<primitive:char-whitespace?> #\z)  ==> #f
#t
(#<primitive:char-whitespace?> #\Z)  ==> #f
#t
(#<primitive:char-whitespace?> #\0)  ==> #f
#t
(#<primitive:char-whitespace?> #\9)  ==> #f
#t
(#<primitive:char-whitespace?> #\space)  ==> #t
#t
(#<primitive:char-whitespace?> #\;)  ==> #f
#t
(#<primitive:char-upper-case?> #\0)  ==> #f
#t
(#<primitive:char-upper-case?> #\9)  ==> #f
#t
(#<primitive:char-upper-case?> #\space)  ==> #f
#t
(#<primitive:char-upper-case?> #\;)  ==> #f
#t
(#<primitive:char-lower-case?> #\0)  ==> #f
#t
(#<primitive:char-lower-case?> #\9)  ==> #f
#t
(#<primitive:char-lower-case?> #\space)  ==> #f
#t
(#<primitive:char-lower-case?> #\;)  ==> #f
#t
(#<primitive:integer->char> 46)  ==> #\.
#t
(#<primitive:integer->char> 65)  ==> #\A
#t
(#<primitive:integer->char> 97)  ==> #\a
#t
(#<primitive:char-upcase> #\A)  ==> #\A
#t
(#<primitive:char-upcase> #\a)  ==> #\A
#t
(#<primitive:char-downcase> #\A)  ==> #\a
#t
(#<primitive:char-downcase> #\a)  ==> #\a
#t
SECTION(6 7)
#t
(#<primitive:string?> "The word \"recursion\\\" has many meanings.")  ==> #t
#t
(#<primitive:string?> "")  ==> #t
#t
(string-set! "?**")  ==> "?**"
#t
(#<primitive:string> #\a #\b #\c)  ==> "abc"
#t
(#<primitive:string>)  ==> ""
#t
(#<primitive:string-length> "abc")  ==> 3
#t
(#<primitive:string-ref> "abc" 0)  ==> #\a
#t
(#<primitive:string-ref> "abc" 2)  ==> #\c
#t
(#<primitive:string-length> "")  ==> 0
#t
(#<primitive:substring> "ab" 0 0)  ==> ""
#t
(#<primitive:substring> "ab" 1 1)  ==> ""
#t
(#<primitive:substring> "ab" 2 2)  ==> ""
#t
(#<primitive:substring> "ab" 0 1)  ==> "a"
#t
(#<primitive:substring> "ab" 1 2)  ==> "b"
#t
(#<primitive:substring> "ab" 0 2)  ==> "ab"
#t
(#<primitive:string-append> "foo" "bar")  ==> "foobar"
#t
(#<primitive:string-append> "foo")  ==> "foo"
#t
(#<primitive:string-append> "foo" "")  ==> "foo"
#t
(#<primitive:string-append> "" "foo")  ==> "foo"
#t
(#<primitive:string-append>)  ==> ""
#t
(#<primitive:make-string> 0)  ==> ""
#t
(#<primitive:string=?> "" "")  ==> #t
#t
(#<primitive:string<?> "" "")  ==> #f
#t
(#<primitive:string>?> "" "")  ==> #f
#t
(#<primitive:string<=?> "" "")  ==> #t
#t
(#<primitive:string>=?> "" "")  ==> #t
#t
(#<primitive:string-ci=?> "" "")  ==> #t
#t
(#<primitive:string-ci<?> "" "")  ==> #f
#t
(#<primitive:string-ci>?> "" "")  ==> #f
#t
(#<primitive:string-ci<=?> "" "")  ==> #t
#t
(#<primitive:string-ci>=?> "" "")  ==> #t
#t
(#<primitive:string=?> "A" "B")  ==> #f
#t
(#<primitive:string=?> "a" "b")  ==> #f
#t
(#<primitive:string=?> "9" "0")  ==> #f
#t
(#<primitive:string=?> "A" "A")  ==> #t
#t
(#<primitive:string<?> "A" "B")  ==> #t
#t
(#<primitive:string<?> "a" "b")  ==> #t
#t
(#<primitive:string<?> "9" "0")  ==> #f
#t
(#<primitive:string<?> "A" "A")  ==> #f
#t
(#<primitive:string>?> "A" "B")  ==> #f
#t
(#<primitive:string>?> "a" "b")  ==> #f
#t
(#<primitive:string>?> "9" "0")  ==> #t
#t
(#<primitive:string>?> "A" "A")  ==> #f
#t
(#<primitive:string<=?> "A" "B")  ==> #t
#t
(#<primitive:string<=?> "a" "b")  ==> #t
#t
(#<primitive:string<=?> "9" "0")  ==> #f
#t
(#<primitive:string<=?> "A" "A")  ==> #t
#t
(#<primitive:string>=?> "A" "B")  ==> #f
#t
(#<primitive:string>=?> "a" "b")  ==> #f
#t
(#<primitive:string>=?> "9" "0")  ==> #t
#t
(#<primitive:string>=?> "A" "A")  ==> #t
#t
(#<primitive:string-ci=?> "A" "B")  ==> #f
#t
(#<primitive:string-ci=?> "a" "B")  ==> #f
#t
(#<primitive:string-ci=?> "A" "b")  ==> #f
#t
(#<primitive:string-ci=?> "a" "b")  ==> #f
#t
(#<primitive:string-ci=?> "9" "0")  ==> #f
#t
(#<primitive:string-ci=?> "A" "A")  ==> #t
#t
(#<primitive:string-ci=?> "A" "a")  ==> #t
#t
(#<primitive:string-ci<?> "A" "B")  ==> #t
#t
(#<primitive:string-ci<?> "a" "B")  ==> #t
#t
(#<primitive:string-ci<?> "A" "b")  ==> #t
#t
(#<primitive:string-ci<?> "a" "b")  ==> #t
#t
(#<primitive:string-ci<?> "9" "0")  ==> #f
#t
(#<primitive:string-ci<?> "A" "A")  ==> #f
#t
(#<primitive:string-ci<?> "A" "a")  ==> #f
#t
(#<primitive:string-ci>?> "A" "B")  ==> #f
#t
(#<primitive:string-ci>?> "a" "B")  ==> #f
#t
(#<primitive:string-ci>?> "A" "b")  ==> #f
#t
(#<primitive:string-ci>?> "a" "b")  ==> #f
#t
(#<primitive:string-ci>?> "9" "0")  ==> #t
#t
(#<primitive:string-ci>?> "A" "A")  ==> #f
#t
(#<primitive:string-ci>?> "A" "a")  ==> #f
#t
(#<primitive:string-ci<=?> "A" "B")  ==> #t
#t
(#<primitive:string-ci<=?> "a" "B")  ==> #t
#t
(#<primitive:string-ci<=?> "A" "b")  ==> #t
#t
(#<primitive:string-ci<=?> "a" "b")  ==> #t
#t
(#<primitive:string-ci<=?> "9" "0")  ==> #f
#t
(#<primitive:string-ci<=?> "A" "A")  ==> #t
#t
(#<primitive:string-ci<=?> "A" "a")  ==> #t
#t
(#<primitive:string-ci>=?> "A" "B")  ==> #f
#t
(#<primitive:string-ci>=?> "a" "B")  ==> #f
#t
(#<primitive:string-ci>=?> "A" "b")  ==> #f
#t
(#<primitive:string-ci>=?> "a" "b")  ==> #f
#t
(#<primitive:string-ci>=?> "9" "0")  ==> #t
#t
(#<primitive:string-ci>=?> "A" "A")  ==> #t
#t
(#<primitive:string-ci>=?> "A" "a")  ==> #t
#t
SECTION(6 8)
#t
(#<primitive:vector?> #(0 (2 2 2 2) "Anna"))  ==> #t
#t
(#<primitive:vector?> #())  ==> #t
#t
(#<primitive:vector> a b c)  ==> #(a b c)
#t
(#<primitive:vector>)  ==> #()
#t
(#<primitive:vector-length> #(0 (2 2 2 2) "Anna"))  ==> 3
#t
(#<primitive:vector-length> #())  ==> 0
#t
(#<primitive:vector-ref> #(1 1 2 3 5 8 13 21) 5)  ==> 8
#t
(vector-set #(0 ("Sue" "Sue") "Anna"))  ==> #(0 ("Sue" "Sue") "Anna")
#t
(#<primitive:make-vector> 2 hi)  ==> #(hi hi)
#t
(#<primitive:make-vector> 0)  ==> #()
#t
(#<primitive:make-vector> 0 a)  ==> #()
#t
SECTION(6 9)
#t
(#<primitive:procedure?> #<primitive:car>)  ==> #t
#t
(#<primitive:procedure?> car)  ==> #f
#t
(#<primitive:procedure?> #<closure:0x0043b764>)  ==> #t
#t
(#<primitive:procedure?> (lambda (x) (* x x)))  ==> #f
#t
(#<primitive:call-with-current-continuation> #<primitive:procedure?>)  ==> #t
#t
(#<primitive:apply> #<primitive:+> (3 4))  ==> 7
#t
(#<primitive:apply> #<closure:0x0043d620> (3 4))  ==> 7
#t
(#<primitive:apply> #<primitive:list> ())  ==> ()
#t
(#<closure:0x0043f3dc> 12 75)  ==> 30
#t
(#<closure:0x00220a3c> #<primitive:cadr> ((a b) (d e) (g h)))  ==> (b e h)
#t
(#<closure:0x00220a3c> #<primitive:+> (1 2 3) (4 5 6))  ==> (5 7 9)
#t
(for-each #(0 1 4 9 16))  ==> #(0 1 4 9 16)
#t
(#<primitive:call-with-current-continuation> #<closure:0x00449df0>)  ==> -3
#t
(#<closure:0x004517b0> (1 2 3 4))  ==> 4
#t
(#<closure:0x004517b0> (a b . c))  ==> #f
#t
(#<closure:0x00220a3c> #<primitive:cadr> ())  ==> ()
#t
SECTION(6 10 1)
#t
(#<primitive:input-port?> #<port:<stdin>>)  ==> #t
#t
(#<primitive:output-port?> #<port:<stdout>>)  ==> #t
#t
(#<closure:0x0025e864> "tests/r4rstest.wisp" #<primitive:input-port?>)  ==> #t
#t
(#<primitive:input-port?> #<port:tests/r4rstest.wisp>)  ==> #t
#t
SECTION(6 10 2)
#t
(#<primitive:peek-char> #<port:tests/r4rstest.wisp>)  ==> #\;
#t
(#<primitive:read-char> #<port:tests/r4rstest.wisp>)  ==> #\;
#t
(#<primitive:read> #<port:tests/r4rstest.wisp>)  ==> (define cur-section (quote ()))
#t
(#<primitive:peek-char> #<port:tests/r4rstest.wisp>)  ==> #\(
#t
(#<primitive:read> #<port:tests/r4rstest.wisp>)  ==> (define errs (quote ()))
#t
SECTION(6 10 3)
#t
(#<closure:0x00261330> "tmp1" #<closure:0x0048aec8>)  ==> #t
#t
(#<primitive:read> #<port:tmp1>)  ==> (define foo (quote (#t #f #\a () 9739 -3 . #((test) "te \" \" st" "" test #() b c))))
(#<primitive:eof-object?> #<eof>)  ==> #t
(#<primitive:eof-object?> #<eof>)  ==> #t
(input-port? #t)  ==> #t
(#<primitive:read-char> #<port:tmp1>)  ==> #\;
(#<primitive:read> #<port:tmp1>)  ==> (#t #f a () 9739 -3 . #((test) te " " st test #() b c))
(#<primitive:read> #<port:tmp1>)  ==> (define foo (quote (#t #f #\a () 9739 -3 . #((test) "te \" \" st" "" test #() b c))))
(#<primitive:output-port?> #<port:tmp2>)  ==> #t
#t
(#<primitive:read> #<port:tmp2>)  ==> (define foo (quote (#t #f #\a () 9739 -3 . #((test) "te \" \" st" "" test #() b c))))
(#<primitive:eof-object?> #<eof>)  ==> #t
(#<primitive:eof-object?> #<eof>)  ==> #t
(input-port? #t)  ==> #t
(#<primitive:read-char> #<port:tmp2>)  ==> #\;
(#<primitive:read> #<port:tmp2>)  ==> (#t #f a () 9739 -3 . #((test) te " " st test #() b c))
(#<primitive:read> #<port:tmp2>)  ==> (define foo (quote (#t #f #\a () 9739 -3 . #((test) "te \" \" st" "" test #() b c))))
(#<primitive:cdr> (1 0.200000))  ==> (0.200000)
#t
(#<primitive:cadr> (1 ... 2))  ==> ...
#t

;testing DELAY and FORCE; 
SECTION(6 9)
(delay 3)  ==> 3
(delay (3 3))  ==> (3 3)
(delay 2)  ==> 2
(#<closure:0x0026eff4> #<closure:0x00496494>)  ==> 6
(#<closure:0x0026eff4> #<closure:0x00496494>)  ==> 6
(force 3)  ==> 3
#t

;testing continuations; 
SECTION(6 9)
(#<closure:0x00465fb4> (a (b (c))) ((a) b c))  ==> #t
(#<closure:0x00465fb4> (a (b (c))) ((a) b c d))  ==> #f
#t

errors were:
(SECTION (got expected (call)))
((6 5 6) (0 #f (#<primitive:string->number> "+")))
((6 5 6) (0 #f (#<primitive:string->number> "-")))
((6 5 6) (0.000000 #f (#<primitive:string->number> "D")))
((6 5 6) (0.000000 #f (#<primitive:string->number> "d")))
((6 5 6) (0.000000 #f (#<primitive:string->number> ".")))
((4 2 6) (#(10 5 (unquote (sqt 4)) (unquote-splicing (map sqt (quote (16 9)))) 8) #(10 5 2 4 3 8) (quasiquote #(10 5 (unquote (sqt 4)) (unquote-splicing (map sqt (quote (16 9)))) 8))))


"last item in file"
<<wisp>> 
